// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmonova/client/block_header.proto

package types

import (
	fmt "fmt"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockHeaderMerkleFields struct {
	VersionChainIdMerkleHash         github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=version_chain_id_merkle_hash,json=versionChainIdMerkleHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"version_chain_id_merkle_hash,omitempty"`
	Height                           uint64                                           `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                       uint64                                           `protobuf:"varint,3,opt,name=time_second,json=timeSecond,proto3" json:"time_second,omitempty"`
	TimeNanoSecond                   uint32                                           `protobuf:"varint,4,opt,name=time_nano_second,json=timeNanoSecond,proto3" json:"time_nano_second,omitempty"`
	LastBlockIdCommitMerkleHash      github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,5,opt,name=last_block_id_commit_merkle_hash,json=lastBlockIdCommitMerkleHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"last_block_id_commit_merkle_hash,omitempty"`
	NextValidatorConsensusMerkleHash github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,6,opt,name=next_validator_consensus_merkle_hash,json=nextValidatorConsensusMerkleHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"next_validator_consensus_merkle_hash,omitempty"`
	LastResultsHash                  github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,7,opt,name=last_results_hash,json=lastResultsHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"last_results_hash,omitempty"`
	EvidenceProposerMerkleHash       github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,8,opt,name=evidence_proposer_merkle_hash,json=evidenceProposerMerkleHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"evidence_proposer_merkle_hash,omitempty"`
}

func (m *BlockHeaderMerkleFields) Reset()         { *m = BlockHeaderMerkleFields{} }
func (m *BlockHeaderMerkleFields) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderMerkleFields) ProtoMessage()    {}
func (*BlockHeaderMerkleFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_e842c8cd2fde14ed, []int{0}
}
func (m *BlockHeaderMerkleFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderMerkleFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderMerkleFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderMerkleFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderMerkleFields.Merge(m, src)
}
func (m *BlockHeaderMerkleFields) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderMerkleFields) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderMerkleFields.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderMerkleFields proto.InternalMessageInfo

func (m *BlockHeaderMerkleFields) GetVersionChainIdMerkleHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.VersionChainIdMerkleHash
	}
	return nil
}

func (m *BlockHeaderMerkleFields) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderMerkleFields) GetTimeSecond() uint64 {
	if m != nil {
		return m.TimeSecond
	}
	return 0
}

func (m *BlockHeaderMerkleFields) GetTimeNanoSecond() uint32 {
	if m != nil {
		return m.TimeNanoSecond
	}
	return 0
}

func (m *BlockHeaderMerkleFields) GetLastBlockIdCommitMerkleHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.LastBlockIdCommitMerkleHash
	}
	return nil
}

func (m *BlockHeaderMerkleFields) GetNextValidatorConsensusMerkleHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.NextValidatorConsensusMerkleHash
	}
	return nil
}

func (m *BlockHeaderMerkleFields) GetLastResultsHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *BlockHeaderMerkleFields) GetEvidenceProposerMerkleHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.EvidenceProposerMerkleHash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockHeaderMerkleFields)(nil), "cosmonova.client.BlockHeaderMerkleFields")
}

func init() {
	proto.RegisterFile("cosmonova/client/block_header.proto", fileDescriptor_e842c8cd2fde14ed)
}

var fileDescriptor_e842c8cd2fde14ed = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0xb8, 0x0b, 0x68, 0xf9, 0x77, 0x58, 0x08, 0xac, 0x03, 0x7c, 0x16, 0x50, 0xa4,
	0x8a, 0x11, 0xf0, 0x04, 0x89, 0x84, 0x72, 0x05, 0x08, 0x05, 0x89, 0x82, 0x66, 0x59, 0xef, 0x0e,
	0xf1, 0xea, 0xec, 0x9d, 0x68, 0x67, 0x13, 0x72, 0xa2, 0xe5, 0x01, 0x78, 0x2c, 0xca, 0xa3, 0xa3,
	0x42, 0x28, 0x79, 0x0b, 0x2a, 0xb4, 0xeb, 0x98, 0x5c, 0x6a, 0x77, 0xe3, 0xf1, 0xb7, 0xbf, 0x6f,
	0xbe, 0x91, 0x86, 0x3d, 0x95, 0x48, 0x35, 0x1a, 0x5c, 0x8a, 0x5c, 0x56, 0x1a, 0x8c, 0xcb, 0x8b,
	0x0a, 0xe5, 0x19, 0x2f, 0x41, 0x28, 0xb0, 0xc3, 0xb9, 0x45, 0x87, 0xf1, 0xd1, 0x7f, 0xd1, 0xb0,
	0x11, 0x1d, 0xdf, 0x9b, 0xe1, 0x0c, 0xc3, 0xcf, 0xdc, 0x57, 0x8d, 0xee, 0xc9, 0xcf, 0x43, 0xf6,
	0x60, 0xe4, 0x9f, 0x4f, 0xc2, 0xeb, 0x37, 0x60, 0xcf, 0x2a, 0x78, 0xad, 0xa1, 0x52, 0x14, 0x3b,
	0xf6, 0x68, 0x09, 0x96, 0x34, 0x1a, 0x2e, 0x4b, 0xa1, 0x0d, 0xd7, 0x8a, 0xd7, 0x41, 0xc0, 0x4b,
	0x41, 0x65, 0x12, 0x65, 0xd1, 0xe0, 0xe6, 0xe8, 0xd5, 0xdf, 0xdf, 0x27, 0xcf, 0x67, 0xda, 0x95,
	0x8b, 0x62, 0x28, 0xb1, 0xce, 0x25, 0xd6, 0xe0, 0x8a, 0xcf, 0x6e, 0x57, 0x54, 0xba, 0xa0, 0xbc,
	0x38, 0x77, 0x40, 0xc3, 0x09, 0xac, 0x46, 0xbe, 0x98, 0x26, 0x5b, 0xf2, 0xd8, 0x83, 0x4f, 0x55,
	0xe3, 0x3b, 0x11, 0x54, 0xc6, 0xf7, 0x59, 0xbf, 0x04, 0x3d, 0x2b, 0x5d, 0x72, 0x25, 0x8b, 0x06,
	0x07, 0xd3, 0xed, 0x57, 0x7c, 0xc2, 0x6e, 0x38, 0x5d, 0x03, 0x27, 0x90, 0x68, 0x54, 0x72, 0x35,
	0xfc, 0x64, 0xbe, 0xf5, 0x3e, 0x74, 0xe2, 0x01, 0x3b, 0x0a, 0x02, 0x23, 0x0c, 0xb6, 0xaa, 0x83,
	0x2c, 0x1a, 0xdc, 0x9a, 0xde, 0xf6, 0xfd, 0xb7, 0xc2, 0xe0, 0x56, 0xf9, 0x95, 0x65, 0x95, 0x20,
	0xc7, 0x9b, 0xbd, 0x69, 0xc5, 0x25, 0xd6, 0xb5, 0x76, 0x7b, 0xe1, 0x0e, 0x3b, 0x84, 0x7b, 0xe8,
	0xe9, 0x61, 0xab, 0xa7, 0x6a, 0x1c, 0xd0, 0x97, 0xf2, 0x7d, 0x8b, 0xd8, 0x33, 0x03, 0x2b, 0xc7,
	0x97, 0xa2, 0xd2, 0x4a, 0x38, 0xb4, 0x5c, 0xa2, 0x21, 0x30, 0xb4, 0xa0, 0xbd, 0x09, 0xfa, 0x1d,
	0x26, 0xc8, 0xbc, 0xc3, 0x87, 0xd6, 0x60, 0xdc, 0xf2, 0x2f, 0x8d, 0xf1, 0x89, 0xdd, 0x0d, 0x3b,
	0xb0, 0x40, 0x8b, 0xca, 0x51, 0x63, 0x79, 0xad, 0x83, 0xe5, 0x1d, 0x8f, 0x9b, 0x36, 0xb4, 0xe0,
	0xf0, 0x85, 0x3d, 0x86, 0xa5, 0x56, 0x60, 0x24, 0xf0, 0xb9, 0xc5, 0x39, 0x12, 0xd8, 0xbd, 0x80,
	0xd7, 0x3b, 0xb8, 0x1d, 0xb7, 0xe8, 0x77, 0x5b, 0xf2, 0x2e, 0xda, 0xe8, 0xc5, 0x8f, 0x75, 0x1a,
	0x5d, 0xac, 0xd3, 0xe8, 0xcf, 0x3a, 0x8d, 0xbe, 0x6f, 0xd2, 0xde, 0xc5, 0x26, 0xed, 0xfd, 0xda,
	0xa4, 0xbd, 0x8f, 0xc9, 0xee, 0x74, 0x56, 0xed, 0xf1, 0xb8, 0xf3, 0x39, 0x50, 0xd1, 0x0f, 0xe7,
	0xf0, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xe5, 0xe7, 0xf3, 0x5d, 0x03, 0x00, 0x00,
}

func (m *BlockHeaderMerkleFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderMerkleFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderMerkleFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceProposerMerkleHash) > 0 {
		i -= len(m.EvidenceProposerMerkleHash)
		copy(dAtA[i:], m.EvidenceProposerMerkleHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.EvidenceProposerMerkleHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastResultsHash) > 0 {
		i -= len(m.LastResultsHash)
		copy(dAtA[i:], m.LastResultsHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.LastResultsHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NextValidatorConsensusMerkleHash) > 0 {
		i -= len(m.NextValidatorConsensusMerkleHash)
		copy(dAtA[i:], m.NextValidatorConsensusMerkleHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.NextValidatorConsensusMerkleHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastBlockIdCommitMerkleHash) > 0 {
		i -= len(m.LastBlockIdCommitMerkleHash)
		copy(dAtA[i:], m.LastBlockIdCommitMerkleHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.LastBlockIdCommitMerkleHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeNanoSecond != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.TimeNanoSecond))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeSecond != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.TimeSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionChainIdMerkleHash) > 0 {
		i -= len(m.VersionChainIdMerkleHash)
		copy(dAtA[i:], m.VersionChainIdMerkleHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.VersionChainIdMerkleHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockHeader(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockHeader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeaderMerkleFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionChainIdMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlockHeader(uint64(m.Height))
	}
	if m.TimeSecond != 0 {
		n += 1 + sovBlockHeader(uint64(m.TimeSecond))
	}
	if m.TimeNanoSecond != 0 {
		n += 1 + sovBlockHeader(uint64(m.TimeNanoSecond))
	}
	l = len(m.LastBlockIdCommitMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	l = len(m.NextValidatorConsensusMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	l = len(m.LastResultsHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	l = len(m.EvidenceProposerMerkleHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	return n
}

func sovBlockHeader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockHeader(x uint64) (n int) {
	return sovBlockHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeaderMerkleFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderMerkleFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderMerkleFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionChainIdMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionChainIdMerkleHash = append(m.VersionChainIdMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.VersionChainIdMerkleHash == nil {
				m.VersionChainIdMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
			}
			m.TimeSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanoSecond", wireType)
			}
			m.TimeNanoSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanoSecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockIdCommitMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockIdCommitMerkleHash = append(m.LastBlockIdCommitMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBlockIdCommitMerkleHash == nil {
				m.LastBlockIdCommitMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorConsensusMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorConsensusMerkleHash = append(m.NextValidatorConsensusMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextValidatorConsensusMerkleHash == nil {
				m.NextValidatorConsensusMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastResultsHash = append(m.LastResultsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastResultsHash == nil {
				m.LastResultsHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceProposerMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceProposerMerkleHash = append(m.EvidenceProposerMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EvidenceProposerMerkleHash == nil {
				m.EvidenceProposerMerkleHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockHeader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockHeader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockHeader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockHeader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockHeader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockHeader = fmt.Errorf("proto: unexpected end of group")
)
