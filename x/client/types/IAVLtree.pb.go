// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmonova/client/IAVLtree.proto

package types

import (
	fmt "fmt"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IAVLMerklePath represents a Merkle step to a leaf data node in an iAVL tree.
type IAVLMerklePath struct {
	IsDataOnRight  bool                                             `protobuf:"varint,1,opt,name=is_data_on_right,json=isDataOnRight,proto3" json:"is_data_on_right,omitempty"`
	SubtreeHeight  uint32                                           `protobuf:"varint,2,opt,name=subtree_height,json=subtreeHeight,proto3" json:"subtree_height,omitempty"`
	SubtreeSize    uint64                                           `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	SubtreeVersion uint64                                           `protobuf:"varint,4,opt,name=subtree_version,json=subtreeVersion,proto3" json:"subtree_version,omitempty"`
	SiblingHash    github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,5,opt,name=sibling_hash,json=siblingHash,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"sibling_hash,omitempty"`
}

func (m *IAVLMerklePath) Reset()         { *m = IAVLMerklePath{} }
func (m *IAVLMerklePath) String() string { return proto.CompactTextString(m) }
func (*IAVLMerklePath) ProtoMessage()    {}
func (*IAVLMerklePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_d61f35359e4f9c9f, []int{0}
}
func (m *IAVLMerklePath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IAVLMerklePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IAVLMerklePath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IAVLMerklePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IAVLMerklePath.Merge(m, src)
}
func (m *IAVLMerklePath) XXX_Size() int {
	return m.Size()
}
func (m *IAVLMerklePath) XXX_DiscardUnknown() {
	xxx_messageInfo_IAVLMerklePath.DiscardUnknown(m)
}

var xxx_messageInfo_IAVLMerklePath proto.InternalMessageInfo

func (m *IAVLMerklePath) GetIsDataOnRight() bool {
	if m != nil {
		return m.IsDataOnRight
	}
	return false
}

func (m *IAVLMerklePath) GetSubtreeHeight() uint32 {
	if m != nil {
		return m.SubtreeHeight
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeSize() uint64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeVersion() uint64 {
	if m != nil {
		return m.SubtreeVersion
	}
	return 0
}

func (m *IAVLMerklePath) GetSiblingHash() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.SiblingHash
	}
	return nil
}

func init() {
	proto.RegisterType((*IAVLMerklePath)(nil), "cosmonova.client.IAVLMerklePath")
}

func init() { proto.RegisterFile("cosmonova/client/IAVLtree.proto", fileDescriptor_d61f35359e4f9c9f) }

var fileDescriptor_d61f35359e4f9c9f = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x7b, 0xb5, 0x8a, 0x5c, 0xff, 0x58, 0x82, 0x43, 0x70, 0x48, 0xa3, 0x20, 0xcd, 0x94,
	0x88, 0xfa, 0x05, 0x2c, 0x0e, 0x15, 0x14, 0x25, 0x42, 0x05, 0x97, 0x70, 0x17, 0x5f, 0x73, 0x87,
	0xe9, 0x5d, 0xc9, 0xbd, 0x2d, 0x6d, 0x77, 0x77, 0x3f, 0x96, 0x63, 0x47, 0x27, 0x91, 0xf6, 0x5b,
	0x38, 0x49, 0xd2, 0xc6, 0x6e, 0x0f, 0xbf, 0xfb, 0xdd, 0xfb, 0xc0, 0x43, 0x3b, 0xb1, 0x36, 0x43,
	0xad, 0xf4, 0x84, 0x05, 0x71, 0x2a, 0x41, 0x61, 0x70, 0x73, 0x35, 0xb8, 0xc5, 0x0c, 0xc0, 0x1f,
	0x65, 0x1a, 0xb5, 0xd5, 0xfe, 0x17, 0xfc, 0xb5, 0x70, 0x74, 0x98, 0xe8, 0x44, 0x17, 0x8f, 0x41,
	0x9e, 0xd6, 0xde, 0xc9, 0x7b, 0x95, 0xb6, 0xf2, 0xaf, 0x77, 0x90, 0xbd, 0xa5, 0xf0, 0xc0, 0x50,
	0x58, 0x5d, 0xda, 0x96, 0x26, 0x7a, 0x61, 0xc8, 0x22, 0xad, 0xa2, 0x4c, 0x26, 0x02, 0x6d, 0xe2,
	0x12, 0x6f, 0x3f, 0x6c, 0x4a, 0x73, 0xcd, 0x90, 0xdd, 0xab, 0x30, 0x87, 0xd6, 0x29, 0x6d, 0x99,
	0x31, 0xcf, 0x4b, 0x23, 0x01, 0x85, 0x56, 0x75, 0x89, 0xd7, 0x0c, 0x9b, 0x1b, 0xda, 0x2f, 0xa0,
	0x75, 0x4c, 0x1b, 0xa5, 0x66, 0xe4, 0x1c, 0xec, 0x1d, 0x97, 0x78, 0xb5, 0xb0, 0xbe, 0x61, 0x8f,
	0x72, 0x0e, 0x56, 0x97, 0x1e, 0x94, 0xca, 0x04, 0x32, 0x23, 0xb5, 0xb2, 0x6b, 0x85, 0x55, 0x16,
	0x0c, 0xd6, 0xd4, 0x7a, 0xa2, 0x0d, 0x23, 0x79, 0x2a, 0x55, 0x12, 0x09, 0x66, 0x84, 0xbd, 0xeb,
	0x12, 0xaf, 0xd1, 0xbb, 0xfc, 0xfd, 0xee, 0x9c, 0x25, 0x12, 0xc5, 0x98, 0xfb, 0xb1, 0x1e, 0x06,
	0xb1, 0x1e, 0x02, 0xf2, 0x57, 0xdc, 0x86, 0x54, 0x72, 0x13, 0xf0, 0x19, 0x82, 0xf1, 0xfb, 0x30,
	0xed, 0xe5, 0x21, 0xac, 0x6f, 0x2e, 0xf5, 0x99, 0x11, 0xbd, 0xf3, 0xcf, 0xa5, 0x43, 0x16, 0x4b,
	0x87, 0xfc, 0x2c, 0x1d, 0xf2, 0xb1, 0x72, 0x2a, 0x8b, 0x95, 0x53, 0xf9, 0x5a, 0x39, 0x95, 0x67,
	0x7b, 0x3b, 0xf5, 0xb4, 0x1c, 0x1b, 0x67, 0x23, 0x30, 0x7c, 0xaf, 0x98, 0xf0, 0xe2, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0x52, 0x02, 0x08, 0x8d, 0x01, 0x00, 0x00,
}

func (m *IAVLMerklePath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IAVLMerklePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IAVLMerklePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiblingHash) > 0 {
		i -= len(m.SiblingHash)
		copy(dAtA[i:], m.SiblingHash)
		i = encodeVarintIAVLtree(dAtA, i, uint64(len(m.SiblingHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubtreeVersion != 0 {
		i = encodeVarintIAVLtree(dAtA, i, uint64(m.SubtreeVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.SubtreeSize != 0 {
		i = encodeVarintIAVLtree(dAtA, i, uint64(m.SubtreeSize))
		i--
		dAtA[i] = 0x18
	}
	if m.SubtreeHeight != 0 {
		i = encodeVarintIAVLtree(dAtA, i, uint64(m.SubtreeHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDataOnRight {
		i--
		if m.IsDataOnRight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIAVLtree(dAtA []byte, offset int, v uint64) int {
	offset -= sovIAVLtree(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IAVLMerklePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDataOnRight {
		n += 2
	}
	if m.SubtreeHeight != 0 {
		n += 1 + sovIAVLtree(uint64(m.SubtreeHeight))
	}
	if m.SubtreeSize != 0 {
		n += 1 + sovIAVLtree(uint64(m.SubtreeSize))
	}
	if m.SubtreeVersion != 0 {
		n += 1 + sovIAVLtree(uint64(m.SubtreeVersion))
	}
	l = len(m.SiblingHash)
	if l > 0 {
		n += 1 + l + sovIAVLtree(uint64(l))
	}
	return n
}

func sovIAVLtree(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIAVLtree(x uint64) (n int) {
	return sovIAVLtree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IAVLMerklePath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIAVLtree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IAVLMerklePath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IAVLMerklePath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDataOnRight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDataOnRight = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeHeight", wireType)
			}
			m.SubtreeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			m.SubtreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeVersion", wireType)
			}
			m.SubtreeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiblingHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIAVLtree
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIAVLtree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiblingHash = append(m.SiblingHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SiblingHash == nil {
				m.SiblingHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIAVLtree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIAVLtree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIAVLtree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIAVLtree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIAVLtree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIAVLtree
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIAVLtree
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIAVLtree
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIAVLtree        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIAVLtree          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIAVLtree = fmt.Errorf("proto: unexpected end of group")
)
