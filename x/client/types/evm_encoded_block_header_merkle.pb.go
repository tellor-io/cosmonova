// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmonova/client/evm_encoded_block_header_merkle.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EvmEncodedBlockHeaderMerkle struct {
	VersionChainIdMerkleHash         string `protobuf:"bytes,1,opt,name=version_chain_id_merkle_hash,json=versionChainIdMerkleHash,proto3" json:"version_chain_id_merkle_hash,omitempty"`
	Height                           uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                       uint64 `protobuf:"varint,3,opt,name=time_second,json=timeSecond,proto3" json:"time_second,omitempty"`
	TimeNanoSecond                   uint32 `protobuf:"varint,4,opt,name=time_nano_second,json=timeNanoSecond,proto3" json:"time_nano_second,omitempty"`
	LastBlockIdCommitMerkleHash      string `protobuf:"bytes,5,opt,name=last_block_id_commit_merkle_hash,json=lastBlockIdCommitMerkleHash,proto3" json:"last_block_id_commit_merkle_hash,omitempty"`
	NextValidatorConsensusMerkleHash string `protobuf:"bytes,6,opt,name=next_validator_consensus_merkle_hash,json=nextValidatorConsensusMerkleHash,proto3" json:"next_validator_consensus_merkle_hash,omitempty"`
	LastResultsHash                  string `protobuf:"bytes,7,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`
	EvidenceProposerMerkleHash       string `protobuf:"bytes,8,opt,name=evidence_proposer_merkle_hash,json=evidenceProposerMerkleHash,proto3" json:"evidence_proposer_merkle_hash,omitempty"`
}

func (m *EvmEncodedBlockHeaderMerkle) Reset()         { *m = EvmEncodedBlockHeaderMerkle{} }
func (m *EvmEncodedBlockHeaderMerkle) String() string { return proto.CompactTextString(m) }
func (*EvmEncodedBlockHeaderMerkle) ProtoMessage()    {}
func (*EvmEncodedBlockHeaderMerkle) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c54a79681d97083, []int{0}
}
func (m *EvmEncodedBlockHeaderMerkle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvmEncodedBlockHeaderMerkle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvmEncodedBlockHeaderMerkle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvmEncodedBlockHeaderMerkle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvmEncodedBlockHeaderMerkle.Merge(m, src)
}
func (m *EvmEncodedBlockHeaderMerkle) XXX_Size() int {
	return m.Size()
}
func (m *EvmEncodedBlockHeaderMerkle) XXX_DiscardUnknown() {
	xxx_messageInfo_EvmEncodedBlockHeaderMerkle.DiscardUnknown(m)
}

var xxx_messageInfo_EvmEncodedBlockHeaderMerkle proto.InternalMessageInfo

func (m *EvmEncodedBlockHeaderMerkle) GetVersionChainIdMerkleHash() string {
	if m != nil {
		return m.VersionChainIdMerkleHash
	}
	return ""
}

func (m *EvmEncodedBlockHeaderMerkle) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EvmEncodedBlockHeaderMerkle) GetTimeSecond() uint64 {
	if m != nil {
		return m.TimeSecond
	}
	return 0
}

func (m *EvmEncodedBlockHeaderMerkle) GetTimeNanoSecond() uint32 {
	if m != nil {
		return m.TimeNanoSecond
	}
	return 0
}

func (m *EvmEncodedBlockHeaderMerkle) GetLastBlockIdCommitMerkleHash() string {
	if m != nil {
		return m.LastBlockIdCommitMerkleHash
	}
	return ""
}

func (m *EvmEncodedBlockHeaderMerkle) GetNextValidatorConsensusMerkleHash() string {
	if m != nil {
		return m.NextValidatorConsensusMerkleHash
	}
	return ""
}

func (m *EvmEncodedBlockHeaderMerkle) GetLastResultsHash() string {
	if m != nil {
		return m.LastResultsHash
	}
	return ""
}

func (m *EvmEncodedBlockHeaderMerkle) GetEvidenceProposerMerkleHash() string {
	if m != nil {
		return m.EvidenceProposerMerkleHash
	}
	return ""
}

func init() {
	proto.RegisterType((*EvmEncodedBlockHeaderMerkle)(nil), "cosmonova.client.EvmEncodedBlockHeaderMerkle")
}

func init() {
	proto.RegisterFile("cosmonova/client/evm_encoded_block_header_merkle.proto", fileDescriptor_2c54a79681d97083)
}

var fileDescriptor_2c54a79681d97083 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0xe3, 0x25, 0xcb, 0x36, 0x8d, 0x6d, 0x99, 0x0f, 0xc3, 0x2c, 0x9b, 0x67, 0xc6, 0x0e,
	0x66, 0x87, 0x04, 0x36, 0xe8, 0xb1, 0xd0, 0x84, 0x40, 0x72, 0x68, 0x28, 0x2e, 0xf4, 0xd0, 0x8b,
	0x50, 0xa4, 0x97, 0x5a, 0xc4, 0xd6, 0x6b, 0x2c, 0xc5, 0xa4, 0xdf, 0xa2, 0x9f, 0xaa, 0xf4, 0x98,
	0x63, 0x8f, 0x25, 0xf9, 0x22, 0xc5, 0xb2, 0x9d, 0x3f, 0x47, 0xbf, 0xfa, 0xfd, 0x1e, 0x3f, 0x42,
	0x2f, 0x39, 0xe3, 0xa8, 0x53, 0x54, 0x58, 0xb0, 0x21, 0x4f, 0x24, 0x28, 0x33, 0x84, 0x22, 0xa5,
	0xa0, 0x38, 0x0a, 0x10, 0x74, 0x91, 0x20, 0x5f, 0xd2, 0x18, 0x98, 0x80, 0x9c, 0xa6, 0x90, 0x2f,
	0x13, 0x18, 0x64, 0x39, 0x1a, 0x74, 0x7b, 0x7b, 0x6f, 0x50, 0x79, 0xbf, 0x1f, 0xdb, 0xa4, 0x3f,
	0x29, 0xd2, 0x49, 0xa5, 0x8e, 0x4a, 0x73, 0x6a, 0xc5, 0x4b, 0xeb, 0xb9, 0xe7, 0xe4, 0x47, 0x01,
	0xb9, 0x96, 0xa8, 0x28, 0x8f, 0x99, 0x54, 0x54, 0x8a, 0x3a, 0x92, 0xc6, 0x4c, 0xc7, 0x9e, 0x13,
	0x38, 0xe1, 0x87, 0xc8, 0xab, 0x99, 0x71, 0x89, 0xcc, 0x44, 0xe5, 0x4e, 0x99, 0x8e, 0xdd, 0x6f,
	0xa4, 0x1b, 0x83, 0xbc, 0x8b, 0x8d, 0xf7, 0x26, 0x70, 0xc2, 0x4e, 0x54, 0x7f, 0xb9, 0xbf, 0xc8,
	0x47, 0x23, 0x53, 0xa0, 0x1a, 0x38, 0x2a, 0xe1, 0xb5, 0xed, 0x21, 0x29, 0x47, 0xd7, 0x76, 0xe2,
	0x86, 0xa4, 0x67, 0x01, 0xc5, 0x14, 0x36, 0x54, 0x27, 0x70, 0xc2, 0x4f, 0xd1, 0xe7, 0x72, 0x3e,
	0x67, 0x0a, 0x6b, 0x72, 0x42, 0x82, 0x84, 0x69, 0x53, 0x5f, 0x5b, 0x0a, 0xca, 0x31, 0x4d, 0xa5,
	0x39, 0xa9, 0xf9, 0xd6, 0xd6, 0xec, 0x97, 0x9c, 0xbd, 0xe3, 0x4c, 0x8c, 0x2d, 0x74, 0xd4, 0x74,
	0x4e, 0xfe, 0x28, 0x58, 0x1b, 0x5a, 0xb0, 0x44, 0x0a, 0x66, 0x30, 0xa7, 0x1c, 0x95, 0x06, 0xa5,
	0x57, 0xfa, 0x24, 0xaa, 0x6b, 0xa3, 0x82, 0x92, 0xbd, 0x69, 0xd0, 0x71, 0x43, 0x1e, 0xe5, 0xfd,
	0x25, 0x5f, 0x6d, 0xad, 0x1c, 0xf4, 0x2a, 0x31, 0xba, 0x92, 0xdf, 0x59, 0xf9, 0x4b, 0x79, 0x10,
	0x55, 0x73, 0xcb, 0x5e, 0x90, 0x9f, 0x50, 0x48, 0x01, 0x8a, 0x03, 0xcd, 0x72, 0xcc, 0x50, 0xef,
	0x5f, 0xae, 0xf2, 0xde, 0x5b, 0xef, 0x7b, 0x03, 0x5d, 0xd5, 0xcc, 0xe1, 0x77, 0xa3, 0x7f, 0x4f,
	0x5b, 0xdf, 0xd9, 0x6c, 0x7d, 0xe7, 0x65, 0xeb, 0x3b, 0x0f, 0x3b, 0xbf, 0xb5, 0xd9, 0xf9, 0xad,
	0xe7, 0x9d, 0xdf, 0xba, 0xf5, 0x0e, 0xcb, 0xb2, 0x6e, 0xd6, 0xc5, 0xdc, 0x67, 0xa0, 0x17, 0x5d,
	0xbb, 0x15, 0xff, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x69, 0xa5, 0x58, 0x0f, 0x4f, 0x02, 0x00,
	0x00,
}

func (m *EvmEncodedBlockHeaderMerkle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvmEncodedBlockHeaderMerkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvmEncodedBlockHeaderMerkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceProposerMerkleHash) > 0 {
		i -= len(m.EvidenceProposerMerkleHash)
		copy(dAtA[i:], m.EvidenceProposerMerkleHash)
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(len(m.EvidenceProposerMerkleHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastResultsHash) > 0 {
		i -= len(m.LastResultsHash)
		copy(dAtA[i:], m.LastResultsHash)
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(len(m.LastResultsHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NextValidatorConsensusMerkleHash) > 0 {
		i -= len(m.NextValidatorConsensusMerkleHash)
		copy(dAtA[i:], m.NextValidatorConsensusMerkleHash)
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(len(m.NextValidatorConsensusMerkleHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastBlockIdCommitMerkleHash) > 0 {
		i -= len(m.LastBlockIdCommitMerkleHash)
		copy(dAtA[i:], m.LastBlockIdCommitMerkleHash)
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(len(m.LastBlockIdCommitMerkleHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeNanoSecond != 0 {
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(m.TimeNanoSecond))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeSecond != 0 {
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(m.TimeSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionChainIdMerkleHash) > 0 {
		i -= len(m.VersionChainIdMerkleHash)
		copy(dAtA[i:], m.VersionChainIdMerkleHash)
		i = encodeVarintEvmEncodedBlockHeaderMerkle(dAtA, i, uint64(len(m.VersionChainIdMerkleHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvmEncodedBlockHeaderMerkle(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvmEncodedBlockHeaderMerkle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EvmEncodedBlockHeaderMerkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionChainIdMerkleHash)
	if l > 0 {
		n += 1 + l + sovEvmEncodedBlockHeaderMerkle(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovEvmEncodedBlockHeaderMerkle(uint64(m.Height))
	}
	if m.TimeSecond != 0 {
		n += 1 + sovEvmEncodedBlockHeaderMerkle(uint64(m.TimeSecond))
	}
	if m.TimeNanoSecond != 0 {
		n += 1 + sovEvmEncodedBlockHeaderMerkle(uint64(m.TimeNanoSecond))
	}
	l = len(m.LastBlockIdCommitMerkleHash)
	if l > 0 {
		n += 1 + l + sovEvmEncodedBlockHeaderMerkle(uint64(l))
	}
	l = len(m.NextValidatorConsensusMerkleHash)
	if l > 0 {
		n += 1 + l + sovEvmEncodedBlockHeaderMerkle(uint64(l))
	}
	l = len(m.LastResultsHash)
	if l > 0 {
		n += 1 + l + sovEvmEncodedBlockHeaderMerkle(uint64(l))
	}
	l = len(m.EvidenceProposerMerkleHash)
	if l > 0 {
		n += 1 + l + sovEvmEncodedBlockHeaderMerkle(uint64(l))
	}
	return n
}

func sovEvmEncodedBlockHeaderMerkle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvmEncodedBlockHeaderMerkle(x uint64) (n int) {
	return sovEvmEncodedBlockHeaderMerkle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EvmEncodedBlockHeaderMerkle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmEncodedBlockHeaderMerkle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvmEncodedBlockHeaderMerkle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvmEncodedBlockHeaderMerkle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionChainIdMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionChainIdMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
			}
			m.TimeSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanoSecond", wireType)
			}
			m.TimeNanoSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanoSecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockIdCommitMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockIdCommitMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorConsensusMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorConsensusMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastResultsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceProposerMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceProposerMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmEncodedBlockHeaderMerkle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvmEncodedBlockHeaderMerkle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvmEncodedBlockHeaderMerkle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmEncodedBlockHeaderMerkle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvmEncodedBlockHeaderMerkle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvmEncodedBlockHeaderMerkle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvmEncodedBlockHeaderMerkle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvmEncodedBlockHeaderMerkle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvmEncodedBlockHeaderMerkle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvmEncodedBlockHeaderMerkle = fmt.Errorf("proto: unexpected end of group")
)
