// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmonova/client/tendermint_sig.proto

package types

import (
	fmt "fmt"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TendermintSig struct {
	R                github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=r,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"r,omitempty"`
	S                github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=s,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"s,omitempty"`
	V                uint32                                           `protobuf:"varint,3,opt,name=v,proto3" json:"v,omitempty"`
	EncodedTimestamp github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,4,opt,name=encoded_timestamp,json=encodedTimestamp,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"encoded_timestamp,omitempty"`
}

func (m *TendermintSig) Reset()         { *m = TendermintSig{} }
func (m *TendermintSig) String() string { return proto.CompactTextString(m) }
func (*TendermintSig) ProtoMessage()    {}
func (*TendermintSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9bb5bf978171c37, []int{0}
}
func (m *TendermintSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TendermintSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TendermintSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TendermintSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TendermintSig.Merge(m, src)
}
func (m *TendermintSig) XXX_Size() int {
	return m.Size()
}
func (m *TendermintSig) XXX_DiscardUnknown() {
	xxx_messageInfo_TendermintSig.DiscardUnknown(m)
}

var xxx_messageInfo_TendermintSig proto.InternalMessageInfo

func (m *TendermintSig) GetR() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *TendermintSig) GetS() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *TendermintSig) GetV() uint32 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *TendermintSig) GetEncodedTimestamp() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.EncodedTimestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*TendermintSig)(nil), "cosmonova.client.TendermintSig")
}

func init() {
	proto.RegisterFile("cosmonova/client/tendermint_sig.proto", fileDescriptor_b9bb5bf978171c37)
}

var fileDescriptor_b9bb5bf978171c37 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0xce, 0x2f, 0xce,
	0xcd, 0xcf, 0xcb, 0x2f, 0x4b, 0xd4, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2f, 0x49, 0xcd,
	0x4b, 0x49, 0x2d, 0xca, 0xcd, 0xcc, 0x2b, 0x89, 0x2f, 0xce, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x80, 0x2b, 0xd3, 0x83, 0x28, 0x93, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b,
	0xea, 0x83, 0x58, 0x10, 0x75, 0x4a, 0x1d, 0x4c, 0x5c, 0xbc, 0x21, 0x70, 0x03, 0x82, 0x33, 0xd3,
	0x85, 0x9c, 0xb8, 0x18, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9c, 0x4c, 0x7e, 0xdd, 0x93,
	0x37, 0x48, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xce, 0xcf, 0x4d,
	0x2d, 0x49, 0x4a, 0x2b, 0x41, 0x30, 0x72, 0x32, 0x93, 0x8a, 0xf5, 0x93, 0x2a, 0x4b, 0x52, 0x8b,
	0xf5, 0x3c, 0x52, 0x2b, 0x9c, 0x40, 0x8c, 0x20, 0xc6, 0x22, 0x90, 0x19, 0xc5, 0x12, 0x4c, 0x94,
	0x98, 0x51, 0x2c, 0xc4, 0xc3, 0xc5, 0x58, 0x26, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1b, 0xc4, 0x58,
	0x26, 0x94, 0xc8, 0x25, 0x98, 0x9a, 0x97, 0x9c, 0x9f, 0x92, 0x9a, 0x12, 0x5f, 0x92, 0x99, 0x9b,
	0x5a, 0x5c, 0x92, 0x98, 0x5b, 0x20, 0xc1, 0x42, 0x81, 0x0d, 0x02, 0x50, 0xe3, 0x42, 0x60, 0xa6,
	0x39, 0x19, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x04, 0x22, 0xcc,
	0x2b, 0xe0, 0xa1, 0x5e, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x45, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x19, 0x0c, 0xbf, 0xf0, 0x96, 0x01, 0x00, 0x00,
}

func (m *TendermintSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TendermintSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TendermintSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedTimestamp) > 0 {
		i -= len(m.EncodedTimestamp)
		copy(dAtA[i:], m.EncodedTimestamp)
		i = encodeVarintTendermintSig(dAtA, i, uint64(len(m.EncodedTimestamp)))
		i--
		dAtA[i] = 0x22
	}
	if m.V != 0 {
		i = encodeVarintTendermintSig(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x18
	}
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintTendermintSig(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintTendermintSig(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTendermintSig(dAtA []byte, offset int, v uint64) int {
	offset -= sovTendermintSig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TendermintSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovTendermintSig(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovTendermintSig(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovTendermintSig(uint64(m.V))
	}
	l = len(m.EncodedTimestamp)
	if l > 0 {
		n += 1 + l + sovTendermintSig(uint64(l))
	}
	return n
}

func sovTendermintSig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTendermintSig(x uint64) (n int) {
	return sovTendermintSig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TendermintSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTendermintSig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TendermintSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TendermintSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintSig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintSig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintSig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintSig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTimestamp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintSig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintSig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTimestamp = append(m.EncodedTimestamp[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedTimestamp == nil {
				m.EncodedTimestamp = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTendermintSig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTendermintSig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTendermintSig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTendermintSig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTendermintSig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTendermintSig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTendermintSig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTendermintSig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTendermintSig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTendermintSig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTendermintSig = fmt.Errorf("proto: unexpected end of group")
)
